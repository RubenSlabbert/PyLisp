define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
