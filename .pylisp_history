define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
string? "test"
(string? "test"
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
)
string? "test"
number? 1
(procedure? add)
procedure? +
(define (add x y) (+ x y))
(procedure? add)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
add4 6
(add4 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define addfour (let ((x 4)) (lambda (y) (+ x y))))
(addfour 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(define add (lambda (x) (+ x x)))
(add 2)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define add (lambda (x) (+ x x)))
(add 2)
(define x 10)
(set! x 5)
x
(set! x 10)
x
(set! x 10)
(define x 10)
(set! x 10)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(+ 1 2)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(cond ((> 3 3) "greater") ((< 3 3) "lesser") (else "equal"))
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
import io
(display 2)
(display 2 4 5)
import io
(display 2)
(display 2 4 5)
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(list 1 2 3)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(+ (list (1 2)))
import io
(display (list (list (1 2 3))))
(list (list 1 2 3))
(+ (list (1 2)))
(list (1 2 3))
(list 1)
(list (1))
(list (1 2 3))
(+ 1 2)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(+ (list (1 2 3))
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
string? "test"
(string? "test"
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
)
string? "test"
number? 1
(procedure? add)
procedure? +
(define (add x y) (+ x y))
(procedure? add)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
add4 6
(add4 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define addfour (let ((x 4)) (lambda (y) (+ x y))))
(addfour 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(define add (lambda (x) (+ x x)))
(add 2)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define add (lambda (x) (+ x x)))
(add 2)
(define x 10)
(set! x 5)
x
(set! x 10)
x
(set! x 10)
(define x 10)
(set! x 10)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(+ 1 2)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(cond ((> 3 3) "greater") ((< 3 3) "lesser") (else "equal"))
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
import io
(display 2)
(display 2 4 5)
import io
(display 2)
(display 2 4 5)
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(list 1 2 3)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(+ (list (1 2)))
import io
(display (list (list (1 2 3))))
(list (list 1 2 3))
(+ (list (1 2)))
(list (1 2 3))
(list 1)
(list (1))
(list (1 2 3))
(+ 1 2)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
)
(display (list (1 2 )))
(+ (list (1 2 3)))
(sum (list (1 2 3)))
import math
(sum (1 2 3))
import math
(sum (list (1 2 3)))
import math
(sum 1 2 3)
'1
'(1 2)
'test
'(1 2)
'test
'(1 2)
import io
(display '1)
(display '(1 2 3))
'(1 2 3)
1
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
'(1 2 3)
import io
(display '(1 2 3))
import io
'(1 2 3)
(display '(1 2 3))
import io
'(1 2 3)
(display '(1 2 3))
import io
'(1 2 3)
(display '(1 2 3))
'(1 2 3)
import io
(display '(1 2 3))
'let
''
'()
'(1)
'(let (x y) )
'1
'(1 2 3)
import math
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
'(1 2 3)
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display (list (1 2 3))
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
string? "test"
(string? "test"
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
)
string? "test"
number? 1
(procedure? add)
procedure? +
(define (add x y) (+ x y))
(procedure? add)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
add4 6
(add4 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define addfour (let ((x 4)) (lambda (y) (+ x y))))
(addfour 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(define add (lambda (x) (+ x x)))
(add 2)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define add (lambda (x) (+ x x)))
(add 2)
(define x 10)
(set! x 5)
x
(set! x 10)
x
(set! x 10)
(define x 10)
(set! x 10)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(+ 1 2)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(cond ((> 3 3) "greater") ((< 3 3) "lesser") (else "equal"))
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
import io
(display 2)
(display 2 4 5)
import io
(display 2)
(display 2 4 5)
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(list 1 2 3)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(+ (list (1 2)))
import io
(display (list (list (1 2 3))))
(list (list 1 2 3))
(+ (list (1 2)))
(list (1 2 3))
(list 1)
(list (1))
(list (1 2 3))
(+ 1 2)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(+ (list (1 2 3))
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
string? "test"
(string? "test"
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
( ))
(( )
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1 2)
(max (1 2))
(max 3.9, 4)
(max 1000000 2(
define r 10
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
debug
print
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
hello-world
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(debug)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
debug
(debug)
hello-world
print hello-world
(hello-world)
(library (hello) (define (hello-world) (print "Hello World")))
(import hello)
(hello-world)
(debug)
?
(print "p")
"?"
(define (add x y) (+ x y))
(define add (lambda (x y) (+ x y)))
add 1 2
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define add (lambda (x y) (+ x y)))
(add 1 2)
(define r (+ 1 2))
r
(count (1 1 1) 1)
count 1 1
(count 1 1)
(let ((x 2) (y 2)) (+ x y))
(list ("a" "b" "c"))
(not (list (1 2 3)))
(list 3)
(list (1 2 3))
list 1 2 3
list (1 2 3)
(not nil)
(boolean? #t)
(boolean? #f)
(boolean? 1)
(boolean? r)
(symbol? r)
(symbol? "foof")
(symbol? define)
(symbol? 1)
(define r 10)
(symbol? r)
(max 1000000 2)
(min 5 2)
(define r 10)
r
(define f (lambda (x y) (+ x y)))
f 1 2
f 500000 299123203
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
fac 1000
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(define r 10)
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
fac 5
(let ((x 2) (y 2)) (+ x y))
(define fac (lambda (n) (if (= n 1) n (* n (fac (- n 1))))))
(let ((x 2) (y 2)) (+ x y))
(display 10)
(display (+ 1 2))
(display (= 1 1))
(define r 10)
(display r)
(display (= 10 r))
(define (+ 2 r))
(define r (+ 2 r))
(define r 10)
(define r (+ 2 r))
(set r 5)
(define r 10)
(define r (+ 2 r))
(set r 5)
(display r)
(define square (lambda (x) (+ x x)))
(square 2)
(display (= 4 (square 2)))
(display (= 4 ((lambda (x) (+ x x)) 2)))
(define r 10)
(define (f x) (+ x 1))
f 1
(define (f x) (+ x 1))
2
f 2
f 3
(define (j f x) (f x))
j f 2
(j f 2)
(define (apply func x y) (func x y))
(apply + 1 2)
(newline)
(define (f) (display "yo"))
f
(f)
(define (f) (display "yo"))
(f)
(newline)
(display (newline))
(define (f) (display "yo"))
(f)
(display "test")
"test"
(newline x)
(newline 1)
(display 1)
(newline)
3
2
(+ 1 2)
(1 2 3)
(list (1 2 3))
(define (double x) (* 2 x))
double 3
(define (eval f x) (f x))
eval double x
eval double 3
eval double 4
eval double x
x
ls
r
v
l
a
r
(define (test) (display "test"))
(test)
ts
re
(+ 1 2)
r
v
test
(+ 1 2)
(())
())
(lambda (x) (+ x x) 2)
(list (1 2 3))
(lambda (x) (+ x x) 2)
(lambda (x))
(let)
(if)
(if (= 1 2) 1 2 3)
(/ 403 186)
(* 2 186)
(- 403 372)
(display 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
((add 1) 2)
(add 1)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(add 2)
(add 1)
(add 1 2)
(add 2)
(add 1)
(add)
(define (add x y) (+ x y))
(add 1 2)
(add)
(add 1)
(add 1) 2
(add 1 2)
(+ 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(add 1)
((add 1) 2)
(define (add x y) (+ x y))
((add 1) 2)
((+ 1) 2)
(+ 1)
(+ (+ 1) 2 2)
(+ ((+ 1) 2) 2)
(^ (^ 5 4) 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
expt 5 4 expt 3
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
(expt 5 4 expt 3)
(expt (expt 5 4) 3)
procedure? +
procedure (+ 1)
procedure? (+ 1)
(define (add x y) (+ x y))
(procedure? add)
procedure? +
)
string? "test"
number? 1
(procedure? add)
procedure? +
(define (add x y) (+ x y))
(procedure? add)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
add4 6
(add4 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define addfour (let ((x 4)) (lambda (y) (+ x y))))
(addfour 6)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(define add (lambda (x) (+ x x)))
(add 2)
(define add4 (let ((x 4)) (lambda (y) (+ x y))))
(add4 6)
(define add (lambda (x) (+ x x)))
(add 2)
(define x 10)
(set! x 5)
x
(set! x 10)
x
(set! x 10)
(define x 10)
(set! x 10)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(+ 1 2)
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
(cond ((> 3 3) "greater") ((< 3 3) "lesser") (else "equal"))
(cond ((> 3 2) "greater") ((< 3 2) "lesser"))
import io
(display 2)
(display 2 4 5)
import io
(display 2)
(display 2 4 5)
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(list 1 2 3)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
(+ (list (1 2)))
import io
(display (list (list (1 2 3))))
(list (list 1 2 3))
(+ (list (1 2)))
(list (1 2 3))
(list 1)
(list (1))
(list (1 2 3))
(+ 1 2)
(list (1 2 3))
(display (list (1 2 3)))
import io
(display (list (1 2 3)))
)
(display (list (1 2 )))
(+ (list (1 2 3)))
(sum (list (1 2 3)))
import math
(sum (1 2 3))
import math
(sum (list (1 2 3)))
import math
(sum 1 2 3)
'1
'(1 2)
'test
'(1 2)
'test
'(1 2)
import io
(display '1)
(display '(1 2 3))
'(1 2 3)
1
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
'(1 2 3)
import io
(display '(1 2 3))
import io
'(1 2 3)
(display '(1 2 3))
import io
'(1 2 3)
(display '(1 2 3))
import io
'(1 2 3)
(display '(1 2 3))
'(1 2 3)
import io
(display '(1 2 3))
'let
''
'()
'(1)
'(let (x y) )
'1
'(1 2 3)
import math
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
'(1 2 3)
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
)
import io
(display '(1 2 3)))
(display '(1 2 3))
import io
(display '(1 2 3))
(display (list (1 2 3)))
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
import io
(display '(1 2 3))
(1 2 3)
(display '(1 2 3))
import io
(display '(1 2 3))
(1 2 3)
'(1 2 3)
(1 2 3)
(display (1 2 3))
import io
(display (1 2 3))
import io
(display (1 2 3))
'(1 2 3)
import io
(display '(1 2 3))
(define (add x y) (+ x y))
(add 1 2)
((add 1) 2)
(define (add2 x) ((add 2) x))
(add2 3)
x
(define (add2 x) ((add 1) x))
(add2 3)
(define (add x y) (+ x y))
((add 1) 2)
((add 3))
((add 3) 4)
(define (add x y) (+ x y)))))
(define (add x y) (+ x y))))
(define (add x y) (+ x y))
(define (add2 x) ((add 2) x))
(add 1 2)
(add 4 5)
(add 3)
(add 1 4)
((add 3) 5)
(add 1 4)
(add2 5)
(add2 1)
(add2 2)
(define (add2 x) (add 2 x))
(add2 4)
(add2 6)
(define (add2 x) ((add 2) x))
(add2 4)
(add2 1)
(add2 2)
(add2 3)
(add2 5)
(define (add2 x) ((add 2) x))
(add2 3)
(define (add2) (add 2))
(add2 3)
(add2) 3
((add2) 5)
(define add2 (add 2))
(add2 3)
(define (add x y) (+ x y))
(add 1 2)
x
y
(debug)
x
(x)
import io
(display x)
(define (add x y) (+ x y))
(add 1 2)
(debug)
(define (add x y) (+ x y))
(add 1 2)
x
(define (add x y) (+ x y))
(define add2 (add 2))
add2 3
add2 2
(add 2 3)
(add 1 1)
add2 2
(add 2 2)
(add2 2)
(add 1 2)
(add2 2)
x
(debug)
(define r x)
(define (add x y) (+ x y))
(add 1 2)
(define (add x y) (+ x y))
(add 1 2)
(debug)
x
y
(define add2 (add 2))
(add2 2)
(add 1 1)
(add2 2)
(define (add x y) (+ x y))
(define add2 (add 2))
(debug)
(define (add x y) (+ x y))
(define add2 (add 2))
(define (add x y) (+ x y))
(define add2 (add 2))
import io
(add 1 2)
display 'test
(add2 3)
(display 'test)
(define (add x y) (+ x y))
(add 2)
(define (add x y) (+ x y))
(add 2)
(define (add x y) (+ x y))
(add 1 2)
(+ 1 2)
(+ 1
2
)
(+ 1
(+ 1 2)
(+ 2
 3
)
(+ 2
1
)
(+ 1
2
)
(+ 1
2
)
(define (add x y)
(+ x y)
)
(+ 1
2
)
(+ 1
2
)
(define
(add x y)
(+ x y))
(let
(
(x 4)
(y 3)
)
(let
(
(x 4)
(y (
+ 2 3))
)
(let
(
(x 4)
(y
(+ 1 2)
)
(+ x y))
(let
(
(x 4)
(y
(+ 1 2)
)
(+ x y))
(let
(
(x 4)
(y
(+ 1 2)
)
(+ x y))
)
(+)
#f
#t
#f
#t
False
True
#f
#t
#f
#t
(+ 1 2)
(+ '(1 2)))
(+ '(1 2))
(list? '(1 2))
(+ 1)
(+ 1 2)
(+ (list (1 2)))
(list? '(1 2 3))
(list? 1)
(max '(1 2))
(define (gcd x y)))
           (let ((n (max '(x y)))))))
                 (m (min '(x y)))))))
             (if (= 0 (modulo n m)))))
                m
               (gcd m (modulo n m)))))))
         (define (gcd x y)
           (let ((n (max '(x y))
                 (m (min '(x y))))
             (if (= 0 (modulo n m))
                m
               (gcd m (modulo n m)))))
)
(define (gcd x y)
(let ((n (max '(x y))
(m (min '(x y)))
(if (= 0 (modulo n m))
m
(gcd m (modulo n m)))))
)
(gcd 6 12)
(mod 6 12)
import math
(mod 6 12)
(let ((n (max '(x y))
(m (min '(x y))
)
n
m
)
import math
(let ((n (max '(x y))
(m (min '(x y))
(let ((n (max '(x y))
(m (min '(x y)))
n * m)
)
import math
(let ((n (max '(x y))
(m (min '(x y)))
n * m)
)
define x 10
import math
define n (max '(12 6))
n
import math
define n (max '(12 6))
import math
(sum '(1 2 3 4 5 6 7 8 9 10))
[1 2 3]
(list 1 2 3)
[1 2 3]
(list 1 2 3)
[1 2 3]
(list 1 2 3)
[1 2 3]
